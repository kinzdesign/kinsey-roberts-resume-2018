          <p> Our <a href="<?php echo Project::getBySlug('server-hardening')->url(); ?>" data-category="Project - Server Migration" data-action="Body Click - Server Hardening">negative experiences with ColdFusion</a> convinced me it was time for a change. I was able to bring my supervisor to the same conclusion: we needed to move to something more modern and secure.</p>
          <p>I was in change of developing and executing a transition plan. I would lead the efforts of myself, another full-time staff, and a part-time student employee.</p>
          <p>As a team, we researched and discussed dozen of potential languages. We selected C# and ASP.NET as the best option for our environment. We were already using <abbr title="Microsoft Internet Information Services">IIS</abbr> as the end server for ColdFusion (with an <abbr title="Internet Server Application Programming Interface">ISAPI</abbr> module redirecting the requests to Apache Tomcat). This meant that we could serve ColdFusion and ASP.NET pages side-by-side on the same server. Additionally, I had significant experience in C# and ASP.NET and could help train the others.</p>
          <p>Our ColdFusion code base was a pile of spaghetti code, so I set some basic standards for new code.  We would begin using source control. Data logic would be object oriented and separated from presentation.  This was new territory for some of the team, so I began holding weekly meetings to train my colleagues.</p>
          <p>Meanwhile, I enabled ASP.NET in the <abbr title="Microsoft Internet Information Services">IIS</abbr> configuration on our development server. I began porting user controls and the business objects to power them. This code became discussion fodder for the weekly meetings. I discussed why I made certain decisions and how all the pieces fit together. Soon, we could serve ASP.NET pages that were identical to the ColdFusion pages. This allowed us to migrate pages in place, one-at-a-time.</p>
          <p>I was even able to write a Windows Forms application that automated much of the code conversion. Simple pages could go from ColdFusion to ASP.NET without any manual coding. A File Explorer style interface makes it easy to see migration progress of folders and files.</p>
          <p>The migration is still underway. As of [], we have converted []% of the pages on our external website and []% of the intranet. We have built two smaller sites on ASP.NET from the ground up. All new development is being done in ASP.NET. My full-time colleague is developing both code and confidence. Our student employee has used my tool to migrate simple pages and is beginning to build basic forms.</p>
